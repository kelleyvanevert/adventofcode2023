{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "scopeName": "source.adventlang",
  "fileTypes": ["al"],
  "patterns": [{ "include": "#statements" }],
  "repository": {
    "statements": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#return-stmt"
        },
        {
          "include": "#string"
        },
        {
          "include": "#regex"
        },
        {
          "include": "#template"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "return-stmt": {
      "name": "keyword.control.flow.ts",
      "match": "(?<!\\.|\\$)\\b(return)\\b(?!\\$)"
    },
    "declaration": {
      "name": "meta.declaration.al",
      "patterns": [
        {
          "include": "#function-declaration-header"
        }
      ]
    },
    "function-declaration-header": {
      "name": "meta.function.definition.al",
      "begin": "(?<!\\.|\\$)\\b(fn\\b)(?:\\s+)([_$[:alpha:]][_$[:alnum:]]*)\\s*",
      "beginCaptures": {
        "1": {
          "name": "storage.type.function.al"
        },
        "2": {
          "name": "entity.name.function.al"
        }
      },
      "end": "(?=\\n)|(?<=\\))",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#function-pattern"
        }
      ]
    },
    "function-pattern": {
      "name": "meta.parameters.al",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.brackets.round.begin.al"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.brackets.round.end.al"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#decl-pattern"
        },
        {
          "name": "punctuation.separator.parameter.al",
          "match": ","
        }
      ]
    },
    "decl-pattern": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#decl-destruct-list"
        },
        {
          "include": "#decl-destruct-tuple"
        },
        {
          "include": "#decl-param-name"
        },
        {
          "include": "#type-annotation"
        }
      ]
    },
    "decl-destruct-list": {
      "patterns": [
        {
          "name": "meta.parameter.list-binding-pattern.al",
          "begin": "(?<!=|:)\\s*(\\[)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.binding-pattern.list.al"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.binding-pattern.list.al"
            }
          },
          "patterns": [
            {
              "include": "#decl-pattern"
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        }
      ]
    },
    "decl-destruct-tuple": {
      "patterns": [
        {
          "name": "meta.parameter.tuple-binding-pattern.al",
          "begin": "(?<!=|:)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.binding-pattern.tuple.al"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.binding-pattern.tuple.al"
            }
          },
          "patterns": [
            {
              "include": "#decl-pattern"
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        }
      ]
    },
    "decl-param-name": {
      "patterns": [
        {
          "match": "(?:\\s+)?(\\.\\.\\.)?\\s*(?<!=|:)([_$[:alpha:]][_$[:alnum:]]*)\\s*",
          "captures": {
            "1": {
              "name": "keyword.operator.rest.al"
            },
            "2": {
              "name": "variable.parameter.al"
            }
          }
        }
      ]
    },
    "type-annotation": {
      "name": "meta.type.annotation.al",
      "begin": ":",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.type.annotation.al"
        }
      },
      "end": "(?=$|[,);\\}\\]]|//)|(?==[^>])|(?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#type"
        }
      ]
    },
    "type": {
      "name": "meta.type.al",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#type-primitive"
        }
      ]
    },
    "type-primitive": {
      "name": "support.type.primitive.al",
      "match": "(?<!\\.|\\$)\\b(str|num|int|double|bool|any|list|tuple|regex)\\b(?!\\$)"
    },
    "function-call-without-args": {
      "begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.al"
        }
      },
      "end": "(?<=\\()"
    },
    "identifier": {
      "patterns": [
        {
          "name": "constant.other.al",
          "match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
        },
        {
          "name": "variable.other.readwrite.al",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "include": "#punctuation-comma"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "punctuation-comma": {
      "name": "punctuation.separator.comma.al",
      "match": ","
    },
    "punctuation-semicolon": {
      "name": "punctuation.terminator.statement.al",
      "match": ";"
    },
    "literal": {
      "name": "literal.al",
      "patterns": [
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#null-literal"
        }
      ]
    },
    "numeric-literal": {
      "patterns": [
        {
          "name": "constant.numeric.hex.al",
          "match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F]+\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.binary.al",
          "match": "\\b(?<!\\$)0(b|B)[01]+\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.octal.al",
          "match": "\\b(?<!\\$)0(o|O)?[0-7]+\\b(?!\\$)"
        },
        {
          "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)| # 1.1E+3\n  (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|       # 1.E+3\n  (?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|       # .1E+3\n  (?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|            # 1E+3\n  (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1\n  (?:\\b[0-9]+(\\.)\\B)|                      # 1.\n  (?:\\B(\\.)[0-9]+\\b)|                      # .1\n  (?:\\b[0-9]+\\b(?!\\.))                     # 1\n)(?!\\$)",
          "captures": {
            "0": {
              "name": "constant.numeric.decimal.al"
            },
            "1": {
              "name": "meta.delimiter.decimal.period.al"
            },
            "2": {
              "name": "meta.delimiter.decimal.period.al"
            },
            "3": {
              "name": "meta.delimiter.decimal.period.al"
            },
            "4": {
              "name": "meta.delimiter.decimal.period.al"
            },
            "5": {
              "name": "meta.delimiter.decimal.period.al"
            },
            "6": {
              "name": "meta.delimiter.decimal.period.al"
            }
          }
        }
      ]
    },
    "boolean-literal": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.al",
          "match": "(?<!\\.|\\$)\\btrue\\b(?!\\$)"
        },
        {
          "name": "constant.language.boolean.false.al",
          "match": "(?<!\\.|\\$)\\bfalse\\b(?!\\$)"
        }
      ]
    },
    "nil-literal": {
      "name": "constant.language.null.al",
      "match": "(?<!\\.|\\$)\\nil\\b(?!\\$)"
    },
    "keyword": {
      "name": "keyword.other.al",
      "match": "\\b(fn|let|if|else|do|while|for|loop|return)\\b"
    },
    "comment": {
      "patterns": [
        {
          "begin": "(^[ \\t]+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.al"
            }
          },
          "end": "(?=$)",
          "patterns": [
            {
              "name": "comment.line.double-slash.al",
              "begin": "//",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.al"
                }
              },
              "end": "(?=$)"
            }
          ]
        }
      ]
    },
    "expression": {
      "name": "meta.expression.al",
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#regex"
        },
        {
          "include": "#template"
        },
        {
          "include": "#postfix_fn_call"
        },
        {
          "include": "#infix_fn_call"
        },
        {
          "include": "#literal"
        },
        {
          "include": "#declaration"
        },
        {
          "include": "#function-call-without-args"
        },
        {
          "include": "#keyword"
        },
        {
          "include": "#identifier"
        },
        {
          "include": "#punctuation"
        }
      ]
    },
    "postfix_fn_call": {
      "name": "entity.name.function.al",
      "begin": "\\.",
      "end": "(?=([^a-zA-Z_]))"
    },
    "infix_fn_call": {
      "name": "entity.name.function.al",
      "begin": "\\:",
      "end": "(?=([^a-zA-Z_]))"
    },
    "string": {
      "patterns": [
        {
          "include": "#template"
        }
      ]
    },
    "template": {
      "name": "string.template.al",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.al"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.al"
        }
      },
      "patterns": [
        {
          "include": "#template-substitution-element"
        },
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "template-substitution-element": {
      "name": "meta.template.expression.al",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.template-expression.begin.al"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.template-expression.end.al"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "string-character-escape": {
      "name": "constant.character.escape.al",
      "match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
    },
    "regex": {
      "patterns": [
        {
          "name": "string.regex.al",
          "begin": "(?<=[=(:,\\[?+!]|return|case|=>|&&|\\|\\||\\*\\/)\\s*(/)(?![/*])(?=(?:[^/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+/(?![/*])[gimy]*(?!\\s*[a-zA-Z0-9_$]))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.al"
            }
          },
          "end": "(/)([gimuy]*)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.al"
            },
            "2": {
              "name": "keyword.other.al"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        },
        {
          "name": "string.regex.al",
          "begin": "/(?![/*])(?=(?:[^/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+/(?![/*])[gimy]*(?!\\s*[a-zA-Z0-9_$]))",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.al"
            }
          },
          "end": "(/)([gimuy]*)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.al"
            },
            "2": {
              "name": "keyword.other.al"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        }
      ]
    },
    "regexp": {
      "patterns": [
        {
          "name": "keyword.control.anchor.regexp",
          "match": "\\\\[bB]|\\^|\\$"
        },
        {
          "name": "keyword.other.back-reference.regexp",
          "match": "\\\\[1-9]\\d*"
        },
        {
          "name": "keyword.operator.quantifier.regexp",
          "match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
        },
        {
          "name": "keyword.operator.or.regexp",
          "match": "\\|"
        },
        {
          "name": "meta.group.assertion.regexp",
          "begin": "(\\()((\\?=)|(\\?!))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            },
            "2": {
              "name": "punctuation.definition.group.assertion.regexp"
            },
            "3": {
              "name": "meta.assertion.look-ahead.regexp"
            },
            "4": {
              "name": "meta.assertion.negative-look-ahead.regexp"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        },
        {
          "name": "meta.group.regexp",
          "begin": "\\((\\?:)?",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            },
            "1": {
              "name": "punctuation.definition.group.capture.regexp"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        },
        {
          "name": "constant.other.character-class.set.regexp",
          "begin": "(\\[)(\\^)?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            },
            "2": {
              "name": "keyword.operator.negation.regexp"
            }
          },
          "end": "(\\])",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            }
          },
          "patterns": [
            {
              "name": "constant.other.character-class.range.regexp",
              "match": "(?:.|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))",
              "captures": {
                "1": {
                  "name": "constant.character.numeric.regexp"
                },
                "2": {
                  "name": "constant.character.control.regexp"
                },
                "3": {
                  "name": "constant.character.escape.backslash.regexp"
                },
                "4": {
                  "name": "constant.character.numeric.regexp"
                },
                "5": {
                  "name": "constant.character.control.regexp"
                },
                "6": {
                  "name": "constant.character.escape.backslash.regexp"
                }
              }
            },
            {
              "include": "#regex-character-class"
            }
          ]
        },
        {
          "include": "#regex-character-class"
        }
      ]
    },
    "regex-character-class": {
      "patterns": [
        {
          "name": "constant.other.character-class.regexp",
          "match": "\\\\[wWsSdDtrnvf]|\\."
        },
        {
          "name": "constant.character.numeric.regexp",
          "match": "\\\\([0-7]{3}|x\\h\\h|u\\h\\h\\h\\h)"
        },
        {
          "name": "constant.character.control.regexp",
          "match": "\\\\c[A-Z]"
        },
        {
          "name": "constant.character.escape.backslash.regexp",
          "match": "\\\\."
        }
      ]
    }
  }
}
